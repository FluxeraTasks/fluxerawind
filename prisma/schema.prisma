generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @db.Uuid
  name        String
  email       String
  isAdmin     Boolean?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  utmContent  String?
  utmTerm     String?

  Workspaces      Workspace[]
  Projects        Project[]
  Features        Feature[]
  Artifacts       Artifact[]
  WorkspaceMember WorkspaceMember[]
  ProjectMember   ProjectMember[]
}

model Workspace {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title    String  @db.Text
  imageUrl String? @db.Text
  userId   String? @db.Uuid

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  Members      WorkspaceMember[]
  Projects     Project[]
  Roles        Role[]
  ArtifactType ArtifactType[]

  Owner User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String  @db.Text
  workspaceId String? @db.Uuid

  canManage Boolean

  getProject  Boolean
  postProject Boolean
  putProject  Boolean
  delProject  Boolean

  getArtifact  Boolean
  postArtifact Boolean
  putArtifact  Boolean
  delArtifact  Boolean

  getTask  Boolean
  postTask Boolean
  putTask  Boolean
  delTask  Boolean

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  Workspace       Workspace?        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  WorkspaceMember WorkspaceMember[]
}

model WorkspaceMember {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String  @db.Uuid
  workspaceId String  @db.Uuid
  roleId      String? @db.Uuid

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  Role      Role?      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  Workspace Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  User      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String  @db.Text
  workspaceId   String? @db.Uuid
  userId        String? @db.Uuid
  obsolete      Boolean
  closed        Boolean
  documentation String? @db.Uuid

  startedAt DateTime? @default(now())
  endAt     DateTime? @default(now())

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  Features Feature[]
  Members  ProjectMember[]

  Owner     User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Workspace Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ProjectMember {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String @db.Uuid
  projectId String @db.Uuid

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  Project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feature {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userStory String  @db.Text
  projectId String? @db.Uuid
  userId    String? @db.Uuid
  isDone    Boolean

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  Artifacts Artifact[]

  Owner   User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Artifact {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String  @db.Text
  artifactTypeId String  @db.Uuid
  level          LEVELS  @default(VERY_LOW)
  featureId      String? @db.Uuid
  workspaceId    String? @db.Uuid
  userId         String? @db.Uuid
  isDone         Boolean

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  Owner        User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Feature      Feature?      @relation(fields: [featureId], references: [id], onDelete: Cascade)
  ArtifactType ArtifactType? @relation(fields: [artifactTypeId], references: [id], onDelete: Cascade)
}

model ArtifactType {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String  @db.Text
  workspaceId String? @db.Uuid

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  Artifacts Artifact[]
  Workspace Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Documentation {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content String @db.Text
}

enum LEVELS {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  VERY_HIG
}
